{"version":3,"sources":["components/Visualizer.js","engine/errors.js","engine/fundamentals.js","engine/body.js","engine/collection.js","components/properties/PairLabel.js","components/properties/LabelGroup.js","components/info/CollectionMeta.js","components/properties/ColorBox.js","components/properties/ValueLabel.js","components/modal/Modal.js","components/modal/body/ColorSelector.js","components/modal/body/TrailSliders.js","components/modal/body/BodyLocation.js","components/modal/body/BodyModal.js","components/info/BodyInterface.js","components/Interface.js","engine/visual.js","engine/animate.js","components/App.js","serviceWorker.js","index.js"],"names":["Visualizer","props","animator","changeScale","state","opacity","this","aniumator","isRunning","initialize","draw","toggle","setState","togglePause","cssObject","zIndex","index","dimensionUpdate","className","id","width","size","height","style","React","Component","CustomValueError","given","min","max","message","undefined","name","Error","LimitError","limit","extra","NotReadyError","task","Position","x","y","vector","a","addObject","object","c","position","difference","p","Math","sqrt","MotionVector","o","Body","mass","velocity","trailLength","trail","colorIndex","trailThickness","highlight","setRandomColor","colorOptions","multiply","v","n","MAX_TRAIL_LENGTH","body","gravCoeff","posDiff","addCoords","length","push","exportCoordinates","splice","addVector","distance","radius","old","setMass","e","MIN_MASS","MAX_MASS","floor","random","i","pixels","string","console","log","BodyCollection","bodies","centerOfMass","updateMetaInfo","posx","posy","addBodyCustom","momx","momy","MAX_BODIES","m","b","j","adjustVector","adjustPosition","total","getMomentum","getWeightedPosition","updateVectors","updatePositions","logvelocity","logPosition","PairLabel","update","updateInterval","window","setInterval","clearInterval","toFixed","padStart","padEnd","label","LabelGroup","center","first","CollectionMeta","collection","t","ColorBox","background","color","ValueLabel","s","toUpperCase","substring","int","Modal","event","stopPropagation","onClick","close","nullClick","title","children","ColorSelector","changeColor","setColor","forceUpdate","map","handleClick","key","grid","ColorSelectBox","click","TrailSliders","alterMass","setMassSafe","step","fieldName","special","BodySlider","edit","value","parseFloat","target","htmlFor","type","defaultValue","onChange","BodyLocation","BodyModal","BodyInterface","unhighlight","showModal","modal","editable","hideModal","onMouseEnter","onMouseLeave","getModal","Interface","collections","rows","CanvasInterface","canvasName","canvas","document","getElementById","ctx","getContext","d","innerWidth","innerHeight","originX","originY","clearRect","translate","fillStyle","beginPath","arc","PI","fill","strokeStyle","lineWidth","stroke","x1","y1","x2","y2","moveTo","lineTo","c1","c2","drawLine","pos1","pos2","drawCoords","trailLen","apply","scale","drawBodyTrail","Animator","canvasId","speed","isPaused","isDrawing","frame","interface","stop","newId","newScale","updateSimulation","clear","drawBody","drawPosition","calculate","requestAnimationFrame","loop","unpause","pause","cancelAnimationFrame","start","App","updateCanvasSize","canvasSize","toggleAll","animators","forEach","paused","addBody","addEventListener","removeEventListener","minWidth","flexBasis","visualizers","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a3bc2b00.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Visualizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.animator = this.props.animator;\n        this.animator.changeScale(1.5);\n\n        this.state = { opacity: 1 };\n    }\n\n    get isRunning() {\n        return this.aniumator.isRunning;\n    }\n\n    componentDidMount() {\n        // Initialize animator once component is rendered\n        this.animator.initialize();\n        this.animator.draw();\n        this.animator.toggle();\n    }\n\n    setOpacity(opacity) {\n        this.setState({opacity: opacity});\n    }\n\n    toggle() {\n        this.animator.togglePause();\n    }\n\n    render() {\n        let cssObject = {\n            zIndex: this.props.index,\n            opacity: this.state.opacity\n        }\n\n        this.animator.dimensionUpdate();\n        \n        return (\n            <canvas className=\"collection\" id={this.animator.id}\n            width={this.props.size} height={this.props.size} style={cssObject}/>\n        );\n    }\n\n}\n\nexport default Visualizer;","/**\n * Error raised when an invalid custom value is inputted\n * @typedef {Error} CustomValueError\n */\nclass CustomValueError extends Error {\n    /**\n     * @param {any} given - The invalid value that was given\n     * @param {number} [min] - The minimum permissible value\n     * @param {number} [max] - The maximum permissible value\n     */\n    constructor(given, min, max) {\n\n        let message = \"Given value '\" + given + \"' is invalid\";\n\n        if (min === max)\n            void 0;\n        else if (min === undefined || min === null)\n            message += \", must be less than \" + max;\n        else if (max === undefined || max === null)\n            message += \", must be greater than \" + min;\n        else\n            message += \", must be between \" + min + \" and \" + max;\n\n        super(message);\n\n        this.name = \"CustomValueError\";\n    }\n}\n\n/**\n * Error raised when an imposed limit is reached\n * @typedef {Error} LimitError\n */\nclass LimitError extends Error {\n    /**\n     * @param {string} name - The name of the variable or limit \n     * @param {*} limit - The value of the limit\n     */\n    constructor(name, limit = undefined) {\n        let extra = (limit === undefined) ? \"\" : (\" of \" + limit);\n        \n        let message = \"Limit\" + extra + \" for \" + name + \" has been reached.\";\n        super(message);\n        \n        this.name = \"LimitError\";\n    }\n}\n\n/**\n * Error raised when a particular task is not ready to be executed\n * @typedef {Error} NotReadyError\n */\nclass NotReadyError extends Error {\n    /**\n     * @param {string} task - Prerequisite task, present tense (git commit convention)\n     */\n    constructor(task) {\n        super(\"Cannot execute - you must \" + task + \" first.\");\n        this.name = \"NotReadyError\";\n    }\n}\n\nexport { CustomValueError, LimitError, NotReadyError };","/** \r\n * Class representing a position in the x/y plane \r\n * @typedef {Object} Position\r\n * @property {number} x - The x value\r\n * @property {number} y - The y value\r\n*/\r\nclass Position {\r\n    /**\r\n     * Create a Position\r\n     * @param {number} [x=0] - The x value\r\n     * @param {number} [y=0] - The y value\r\n     */\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Adjust this position based on a motion vector\r\n     * @param {MotionVector} vector - The vector being used to adjust this position\r\n     */\r\n    async addVector(vector) {\r\n        this.addObject(vector);\r\n    }\r\n\r\n    /**\r\n     * Adjust this position based on an object\r\n     * @param {Position, MotionVector} object - The object being used to adjust \r\n     */\r\n    async addObject(object) {\r\n        this.x += object.x;\r\n        this.y += object.y;\r\n    }\r\n\r\n    /**\r\n     * Multiply this position by some coefficient\r\n     * @param {number} c - The given coefficient\r\n     */\r\n    async multiply(c) {\r\n        this.x *= c;\r\n        this.y *= c;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Position} position - The position from which to calculate\r\n     * @returns {Position} A position representing the difference between the two\r\n     * @example\r\n     * let a = Position(-5, 7);\r\n     * let b = Position(2, 3);\r\n     * // returns new Position(7, -4)\r\n     * a.difference(b);\r\n     */\r\n    async difference(position) {\r\n        return new Position(position.x - this.x, position.y - this.y);\r\n    }\r\n\r\n    /**\r\n     * Calculate the distance between two {@link Position} objects.\r\n     * @param {Position} position - Position from which to calculate\r\n     * @returns {number} The distance between the positions\r\n     * @example\r\n     * let a = Position(0, 0);\r\n     * let b = Position(12, 5);\r\n     * // Both return 13\r\n     * a.distance(b);\r\n     * b.distance(a);\r\n     */\r\n    async distance(position) {\r\n        let p = await this.difference(position);\r\n\r\n        return Math.sqrt((p.x * p.x) + (p.y * p.y));\r\n    }\r\n\r\n    /**\r\n     * Give coordinates as an array of numbers\r\n     * @returns {number[]} An array of the coordinates formatted as [x, y]\r\n     */\r\n    exportCoordinates() {\r\n        return [this.x, this.y];\r\n    }\r\n\r\n    /**\r\n     * @returns A string of the form \"[ x, y ]\" for logging\r\n     */\r\n    get string() {\r\n        return \"[ \" + this.x + \", \" + this.y + \" ]\";\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Class respresenting a motion vector\r\n * @typedef {Object} MotionVector\r\n * @property {number} x - The x component\r\n * @property {number} y - The y component\r\n */\r\nclass MotionVector {\r\n\r\n    /**\r\n     * Create a MotionVector\r\n     * @param {number} [x=0] - The x component of the vector\r\n     * @param {number} [y=0] - The y component of the vector\r\n     */\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    /**\r\n     * Reset this MotionVector to [ 0, 0 ]\r\n     */\r\n    async reset() {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    }\r\n\r\n    /**\r\n     * Adds the (x, y) values passed to their constituent components\r\n     * @param {number} x - Value to add to x component\r\n     * @param {number} y - Value to add to y component\r\n     */\r\n    async addCoords(x, y) {\r\n        this.x += x;\r\n        this.y += y;\r\n    }\r\n\r\n    /**\r\n     * Adds an object with x and y fields to the vector\r\n     * @param {MotionVector, Position} o - The object being added.\r\n     */\r\n    async addObject(o) {\r\n        this.x += o.x;\r\n        this.y += o.y;\r\n    }\r\n\r\n    /**\r\n     * Multiply this vector by some coefficient\r\n     * @param {number} c - The given coefficient\r\n     */\r\n    async multiply(c) {\r\n        this.x *= c;\r\n        this.y *= c;\r\n    }\r\n\r\n    /**\r\n     * @returns A string of the form \"[ x, y ]\" for logging\r\n     */\r\n    get string() {\r\n        return \"[ \" + this.x + \", \" + this.y + \" ]\";\r\n    }\r\n\r\n}\r\n\r\nexport {Position, MotionVector};","import { CustomValueError } from \"./errors\";\r\nimport { Position, MotionVector } from \"./fundamentals\";\r\n\r\n/**\r\n * Class representing a gravitationally interacting \"body\" in space\r\n * @typedef {Object} Body\r\n * @property {number} mass - A value in (0, 1] representing the body's mass\r\n * @property {Position} position - The body's position in space\r\n * @property {MotionVector} velocity - The body's velocityin space\r\n * @property {number} trailLength - The number of previous positions stored\r\n * @property {number[][]} trail - The body's previous positions as a 2d array\r\n * \r\n * @property {number} trailThickness - The thickness of the trail in pixels\r\n * @property {boolean} highlight - Whether or not the body is highlighted\r\n */\r\nclass Body {\r\n\r\n    static MAX_TRAIL_LENGTH = 2000;\r\n    static MIN_MASS = 0.1;\r\n    static MAX_MASS = 1;\r\n\r\n    static colorOptions = [\r\n        \"#f44336\",  // Red\r\n        \"#E91E63\",  // Pink\r\n        \"#9C27B0\",  // Purple\r\n        \"#673AB7\",  // Deep Purple\r\n        \"#3F51B5\",  // Indigo\r\n        \"#2196F3\",  // Blue\r\n        \"#00BCD4\",  // Cyan\r\n        \"#009688\",  // Teal\r\n        \"#4CAF50\",  // Green\r\n        \"#CDDC39\",  // Lime\r\n        \"#FFEB3B\",  // Yellow\r\n        \"#FFC107\",  // Amber\r\n        \"#FF9800\",  // Orange\r\n        \"#FF5722\",  // Deep Orange\r\n    ];\r\n    \r\n    /**\r\n     * \r\n     * @param {number} mass - The body's mass, some float in (0, 1]\r\n     * @param {Position} position - The body's position in space\r\n     * @param {MotionVector} velocity - The body's velocity in space\r\n     */\r\n    constructor(mass, position, velocity) {\r\n        this.mass = mass;\r\n        this.position = position;\r\n        this.velocity = velocity;\r\n\r\n        this.trailLength = 0;\r\n        this.trail = [];\r\n\r\n        // Visual properties\r\n        this.colorIndex = 0;\r\n        this.trailThickness = 2;\r\n        this.highlight = false;\r\n\r\n        this.setRandomColor();\r\n    }\r\n\r\n    /**\r\n     * @returns {number} - The body's position in the x dimension\r\n     */\r\n    get x() {\r\n        return this.position.x;\r\n    }\r\n    /**\r\n     * @returns {number} - The body's position in the y direction\r\n     */\r\n    get y() {\r\n        return this.position.y;\r\n    }\r\n    /**\r\n     * @returns {number} - The body's radius in pixels\r\n     */\r\n    get radius() {\r\n        return this.mass * 10;\r\n    }\r\n    /**\r\n     * @returns {string} - The body's color as a css-permissible string\r\n     */\r\n    get color() {\r\n        return Body.colorOptions[this.colorIndex];\r\n    }\r\n\r\n    /**\r\n     * @returns {Position} The position of the body weighted by its mass\r\n     */\r\n    async getWeightedPosition() {\r\n        let p = new Position(this.x, this.y);\r\n        p.multiply(this.mass);\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * @returns {MotionVector} The momentum of the body (p = m * v)\r\n     */\r\n    async getMomentum() {\r\n        let v = new MotionVector(this.velocity.x, this.velocity.y);\r\n        v.multiply(this.mass);\r\n        return v;\r\n    }\r\n\r\n    /**\r\n     * Set this body's trail length to some number of frames\r\n     * @param {number} n - The desired length of the trail \r\n     * @returns {number} The body's new trial length\r\n     */\r\n    setTrailLength(n) {\r\n        if (n < 0 || n > Body.MAX_TRAIL_LENGTH)\r\n            throw new CustomValueError(n, 0, Body.MAX_TRAIL_LENGTH);\r\n\r\n        this.trailLength = n;\r\n        return this.trailLength;\r\n    }\r\n\r\n    /**\r\n     * Alter this body's velocity based on the gravitaional attraction of \r\n     * another body using Newton's equation, the product of two bodies' masses\r\n     * divided by the square of the distance between them.\r\n     * @param {Body} body - The body influencing this one\r\n     */\r\n    async adjustVector(body) {\r\n        let c = await this.gravCoeff(body);\r\n\r\n        // Convert force to velocity by multiplying by inverse of mass\r\n        c *= (1 / this.mass);\r\n\r\n\r\n        let posDiff = await this.position.difference(body.position);\r\n\r\n        await this.velocity.addCoords(c * posDiff.x, c * posDiff.y);\r\n    }\r\n\r\n    /**\r\n     * Alter this body's position based on its velocity, updating\r\n     * the trail array if necessary\r\n     */\r\n    async adjustPosition() {\r\n        if (this.trailLength !== 0 && this.trailLength >= this.trail.length)\r\n            this.trail.push(this.position.exportCoordinates());\r\n        \r\n        if (this.trail.length > this.trailLength)\r\n            this.trail.splice(0, this.trail.length - this.trailLength);\r\n            \r\n        await this.position.addVector(this.velocity);\r\n    }\r\n\r\n    /**\r\n     * Calculates the strength of the gravitational attraction of this body to\r\n     * another, a value that is used as a coefficient for subsequent alterations\r\n     * to motion vector components (coefficients distribute)\r\n     * @param {Body} body - The body to which the gravitational attraction is calculated\r\n     * @returns {number} The strength of the gravitational attraction\r\n     */\r\n    async gravCoeff(body) {\r\n        let radius = await this.position.distance(body.position);\r\n        return (this.mass * body.mass) / (radius * radius) * 0.5;\r\n    }\r\n\r\n    /**\r\n     * Safely (without altering momentum) sets the mass of the body\r\n     * Preserves global momentum (center of mass) in an n-body system\r\n     * @param {number} mass - The new mass\r\n     */\r\n    setMassSafe(mass) {\r\n        let old = this.mass;\r\n        try {\r\n            this.setMass(mass);\r\n        }\r\n        catch (e) {\r\n            throw e;\r\n        }\r\n        finally {\r\n            this.velocity.multiply(old / this.mass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the mass of  the body\r\n     * @param {number} mass - The new mass \r\n     */\r\n    setMass(mass) {\r\n        if (mass < Body.MIN_MASS || mass > Body.MAX_MASS)\r\n            throw new CustomValueError(mass, Body.MIN_MASS, Body.MAX_MASS);\r\n        \r\n        this.mass = mass;\r\n    }\r\n\r\n\r\n\r\n    // VISUAL METHODS\r\n    \r\n    /**\r\n     * Sets color of body to a random color from the options\r\n     * @returns {number} The index of the color in the options list\r\n     */\r\n    setRandomColor() {\r\n        this.colorIndex = Math.floor(Math.random() * Body.colorOptions.length);\r\n        return this.colorIndex;\r\n    }\r\n\r\n    /**\r\n     * Sets color of body to the specified index\r\n     * @param {number} i - The index of the color selected \r\n     * @returns {number} The index of the color in the options list    \r\n     */\r\n    setColor(i) {\r\n        if (i < 0 || i >= Body.colorOptions.length)\r\n            throw new CustomValueError(i, 0, Body.colorOptions.length);\r\n        this.colorIndex = i;\r\n        return i;\r\n    }\r\n\r\n    /**\r\n     * Sets the trail thickness of the body\r\n     * @param {number} pixels - The new thickness, in pixels\r\n     * @returns {number} The thickness, in pixels, of the body\r\n     */\r\n    setTrailThickness(pixels) {\r\n        if (pixels <= 0 || pixels > this.radius)\r\n            throw new CustomValueError(pixels, 0, this.radius);\r\n\r\n        this.trailThickness = pixels;\r\n        return this.trailThickness;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * A short informative string for logging\r\n     */\r\n    get string() {\r\n        let p = \"  Position: \" + this.position.string;\r\n        let m = \"  Motion vector: \" + this.velocity.string;\r\n        return \"BODY SNAPSHOT\\n\" + p + \"\\n\" + m + \"\\n\";\r\n    }\r\n\r\n    /**\r\n     * Logs the position of the body in space\r\n     */\r\n    logPosition() {\r\n        console.log(\"Position snapshot: \" + this.position.string);\r\n    }\r\n\r\n    /**\r\n     * Logs the velocity of the body in space\r\n     */\r\n    logvelocity() {\r\n        console.log(\"velocity snapshot: \" + this.velocity.string);\r\n    }\r\n}\r\n\r\nexport default Body;","import { LimitError } from \"./errors\";\nimport { Position, MotionVector } from \"./fundamentals\";\nimport Body from \"./body\";\n\n/**\n * Class representing a collection of bodies that interact with one another\n * @typedef {Object} BodyCollection \n * @property {Body[]=[]} bodies - An array of the bodies in the collection\n */\nclass BodyCollection {\n\n    static MAX_BODIES = 10;\n\n    constructor(bodies=[]) {\n        this.bodies = bodies;\n\n        this.centerOfMass = new Position();\n        this.velocity = new MotionVector();\n        this.position = this.centerOfMass;\n\n        this.updateMetaInfo();\n    }\n\n    /**\n     * Adds a body to the collection with no velocity and mass 1\n     * @param {number} posx - The x position of the body\n     * @param {number} posy - The y position of the body\n     * @returns {Body} The Body object that was added to the collection\n     */\n    addBody(posx=0, posy=0) {\n        return this.addBodyCustom(1, posx, posy, 0, 0);\n    }\n\n    /**\n     * Adds a body to the collection with all custom properties\n     * @param {number} mass - The mass of the body \n     * @param {number} posx - The x position of the body\n     * @param {number} posy - The y position of the body\n     * @param {number} momx - The x component of the body's velocity\n     * @param {number} momy - The y component of the body's velocity\n     * @returns {Body} The body object that was added to the collection\n     */\n    addBodyCustom(mass, posx, posy, momx, momy) {\n        if (this.bodies.length >= BodyCollection.MAX_BODIES) {\n            throw new LimitError(\"body count\", BodyCollection.MAX_BODIES);\n        }\n\n        let p = new Position(posx, posy);\n        let m = new MotionVector(momx, momy);\n\n        let b = new Body(mass, p, m);\n        this.bodies.push(b);\n\n        return b;\n    }\n\n    /**\n     * Remove a body from this collection\n     * @param {number} index - The index of the body in this.bodies\n     * @returns {Body} The body that was removed\n     */\n    removeBody(index) {\n        return this.bodies.splice(index, 1)[0];\n    }\n    \n    /**\n     * Updates the motion vectors of all bodies in the collection\n     * by calculating each of their influences on all the others\n     * at a static point in time\n     */\n    async updateVectors() {\n        for (let i = 0; i < this.bodies.length; i++) {\n            for (let j = 0; j < this.bodies.length; j++) {\n                if (i === j)\n                    continue;\n                await this.bodies[i].adjustVector(this.bodies[j]);\n            }\n        }\n    }\n\n    /**\n     * Updates the positions of all the bodies based on their\n     * current velocity vectors.\n     */\n    async updatePositions() {\n        for (let i = 0; i < this.bodies.length; i++) {\n            await this.bodies[i].adjustPosition();\n        }\n\n        await this.updateMetaInfo();\n    }\n\n    /**\n     * Updates the center of mass and velocity fields of the collection\n     */\n    async updateMetaInfo() {\n        await this.centerOfMass.multiply(0);\n        await this.velocity.multiply(0);\n\n        let total = 0;\n\n        for (let i = 0; i < this.bodies.length; i++) {\n            await this.velocity.addObject(await this.bodies[i].getMomentum());\n            await this.centerOfMass.addObject(await this.bodies[i].getWeightedPosition());\n            total += this.bodies[i].mass;\n        }\n\n        await this.centerOfMass.multiply(1 / total);\n        await this.velocity.multiply(1 / total);\n    }\n\n    /**\n     * Updates the entire simulation, consecutively rather\n     * than concurrently to avoid miscalculations\n     */\n    async updateSimulation() {\n        await this.updateVectors();\n        await this.updatePositions();\n    }\n\n    /**\n     * Logs the velocitys of each body to the console\n     */\n    logvelocitys() {\n        for (let i = 0; i < this.bodies.length; i++) {\n            this.bodies[i].logvelocity(i);\n        }\n    }\n\n    /**\n     * Logs the positions of each body to the console\n     */\n    logPositions() {\n        for (let i = 0; i < this.bodies.length; i++) {\n            this.bodies[i].logPosition(i);\n        }\n    }\n\n    /**\n     * Logs full information, both position and velocity,\n     * on all bodies in the collection, as well as the\n     * collection's center of mass, to the console\n     */\n    log() {\n        console.log(\"CENTER OF MASS: \" + this.centerOfMass().string);\n        console.log(\"\\nBODIES: \");\n        for (let i = 0; i < this.bodies.length; i++) {\n            console.log(this.bodies[i].string);\n        }\n    }\n\n}\n\nexport default BodyCollection;","import React from \"react\";\n\nclass PairLabel extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            x: this.props.object.x,\n            y: this.props.object.y\n        };\n\n        this.updateInterval = null;\n    }\n\n    componentDidMount() {\n        this.updateInterval = window.setInterval(this.update, 150);\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.updateInterval);\n    }\n\n    update = () => {\n        this.setState({\n            x: this.props.object.x,\n            y: this.props.object.y\n        });\n    }\n\n    // Aesthetic preparation\n    x() {\n        return this.state.x.toFixed(2).padStart(7, \"\\u00a0\");\n    }\n    y() {\n        return this.state.y.toFixed(2).padEnd(7, \"\\u00a0\");\n    }\n\n    render() {\n        return (\n            <tr>\n                <td className=\"labelType\">\n                    <span>\n                        {this.props.label}:\n                    </span>\n                </td>\n                <td className=\"labelValue\">\n                    <span>\n                        [ <span>{this.x()}</span> , <span>{this.y()}</span> ]\n                    </span>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default PairLabel;","import React from \"react\";\n\nimport PairLabel from \"./PairLabel\"\n\nclass LabelGroup extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        if (props.center)\n            this.first = \"CENTER OF MASS\"\n        else\n            this.first = \"POSITION\"\n    }\n\n    render() {\n        return (\n            <div className=\"labelWrapper\">\n                <table className=\"labelGroup\">\n                    <tbody>\n                    <PairLabel object={this.props.object.position} label={this.first} />\n                    <PairLabel object={this.props.object.velocity} label=\"VELOCITY\" />\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\n\n\nexport default LabelGroup;","import React from \"react\";\n\nimport BodyCollection from \"../../engine/collection\";\nimport LabelGroup from \"../properties/LabelGroup\";\n\nclass CollectionMeta extends React.Component {\n\n    render() {\n        let b = this.props.collection.bodies.length;\n        let t = BodyCollection.MAX_BODIES;\n        return (\n            <div className=\"collectionMeta\">\n                <div className=\"collectionTitle\">\n                    <span>Collection {this.props.index + 1}</span>\n                </div>\n                <div className=\"collectionInfo\">\n                    <LabelGroup object={this.props.collection} center={true} />\n                    <div className=\"bodyCount\">\n                        <span>Bodies: <span>{b}</span> / <span>{t}</span></span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CollectionMeta;","import React from \"react\";\n\nclass ColorBox extends React.Component {\n    render() {\n        \n\n        let cssObject = {\n            background: this.props.body.color\n        }\n        return (\n            <div className=\"colorBox\" style={cssObject}></div>\n        );\n    }\n}\n\n\n\nexport default ColorBox;","import React from \"react\";\n\nclass ValueLabel extends React.Component {\n\n    capitalize(s) {\n        return s[0].toUpperCase() + s.substring(1);\n    }\n\n    render() {\n        return (\n            <div className=\"singleLabelWrapper\">\n                <span className=\"singleLabelType\">\n                    {this.props.label}\n                </span><br />\n                <span className=\"singleLabelValue\">\n                    {this.props.body[this.props.name].toFixed(this.props.int ? 2 : 0)}\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default ValueLabel;","import React from \"react\";\n\nimport \"../../style/modal.css\";\n\nclass Modal extends React.Component {\n    nullClick(event) {\n        event.stopPropagation();\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" onClick={this.props.close}>\n                <div className=\"modalBox\" onClick={this.nullClick}>\n                    <div className=\"modalHeader\">\n                        <div><h1>{this.props.title}</h1></div>\n                        <div className=\"closeModal\" onClick={this.props.close}>\n                            <span>X</span>\n                        </div>\n                    </div>\n                    <div className=\"modalBody\">\n                        {this.props.children}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Modal;","import React from \"react\";\n\nimport Body from \"../../../engine/body\";\n\nclass ColorSelector extends React.Component {\n\n    changeColor = (index) => {\n        this.props.body.setColor(index);\n        this.forceUpdate();\n    }\n\n    grid() {\n        return Body.colorOptions.map((s, i) => (\n            <ColorSelectBox \n                handleClick={this.changeColor}\n                highlight={this.props.body.color === s}\n                key={i} color={s} index={i}\n            />\n        ));\n    }\n    render() {\n        return (\n            <div className=\"colorSelector\">\n                {this.grid()}\n            </div>\n        );\n    }\n}\n\nclass ColorSelectBox extends React.Component {\n    click = () => {\n        this.props.handleClick(this.props.index);\n    }\n\n    render() {\n        let c = \"colorBox grid\" + (this.props.highlight ? \" current\" : \"\");\n        let s = { background: this.props.color };\n        return (\n            <div className={c} style={s} onClick={this.click}></div>\n        );\n    }\n}\n\nexport default ColorSelector;","import React from \"react\";\nimport Body from \"../../../engine/body\";\n\nclass TrailSliders extends React.Component {\n    alterMass = (mass) => {\n        this.props.body.setMassSafe(mass);\n    }\n\n    render() {\n        return (\n            <div className=\"bodySliders\">\n                <BodySlider \n                    min={Body.MIN_MASS} max={Body.MAX_MASS} step={0.01}\n                    fieldName=\"mass\" body={this.props.body}\n                    label=\"Mass\" special={this.alterMass}\n                />\n                <BodySlider\n                    min={0} max={Body.MAX_TRAIL_LENGTH} step={1}\n                    fieldName=\"trailLength\" body={this.props.body}\n                    label=\"Trial length\"\n                />\n                <BodySlider\n                    min={1} max={this.props.body.radius} step={1}\n                    fieldName=\"trailThickness\" body={this.props.body}\n                    label=\"Trail thick\"\n                />\n            </div>\n        );\n    }\n}\n\nclass BodySlider extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.props.body[this.props.fieldName]\n        };\n    }\n\n    edit = (event) => {\n        let value = parseFloat(event.target.value);\n\n        if (this.props.special)\n            this.props.special(value);\n        else\n            this.props.body[this.props.fieldName] = value;\n        \n        this.setState({value: event.target.value});\n    }\n\n    render() {\n        return (\n            <div className=\"bodySliderWrapper\">\n                <label className=\"slider\" htmlFor={this.props.fieldName}>\n                    {this.props.label}\n                </label>\n                <div className=\"sliderContainer\">\n                    <input \n                        type=\"range\"\n                        name={this.props.fieldName}\n                        min={this.props.min}\n                        max={this.props.max}\n                        step={this.props.step}\n                        defaultValue={this.props.body[this.props.fieldName]}\n                        onChange={this.edit}\n                    />\n                </div>\n                <label className=\"slider value\">{this.state.value}</label>\n            </div>\n        );\n    }\n}\n\nexport default TrailSliders;","import React from \"react\";\n\nclass BodyLocation extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            x: this.props.body.x,\n            y: this.props.body.y\n        }\n    }\n    render() {\n        return (\n            <div className=\"bodyLocationWrapper\">\n\n            </div>\n        );\n    }\n}\n\nexport default BodyLocation;","import React from \"react\";\n\nimport ColorSelector from \"./ColorSelector\";\nimport TrailSliders from \"./TrailSliders\";\nimport BodyLocation from \"./BodyLocation\";\nimport \"../../../style/body.css\";\n\nclass BodyModal extends React.Component {\n    render() {\n        return (\n            <div className=\"bodyModal\">\n                <div className=\"bodyModalLeftWrapper\">\n                    <ColorSelector body={this.props.body} />\n                    <TrailSliders body={this.props.body} />\n                </div>\n                <div className=\"bodyModalRightWrapper\">\n                    <BodyLocation body={this.props.body} collection={this.props.collection}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BodyModal;","import React from \"react\";\n\nimport ColorBox from \"../properties/ColorBox\";\nimport LabelGroup from \"../properties/LabelGroup\";\nimport ValueLabel from \"../properties/ValueLabel\";\nimport Modal from \"../modal/Modal\";\nimport BodyModal from \"../modal/body/BodyModal\";\n\nclass BodyInterface extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modal: false\n        };\n\n    }\n\n    highlight = () => {\n        this.props.body.highlight = true;\n    }\n\n    unhighlight = () => {\n        this.props.body.highlight = false;\n    }\n\n    showModal = () => {\n        if (!this.state.modal && this.props.editable)\n            this.setState({modal: true});\n    }\n\n    hideModal = () => {\n        this.setState({modal: false});\n        this.unhighlight();\n    }\n\n    getModal() {\n        if (this.state.modal) {\n            return (\n                <Modal close={this.hideModal} title={\"Body Editor\"}>\n                    <BodyModal body={this.props.body} collection={this.props.collection}/>\n                </Modal>\n            );\n        }\n        else\n            return \"\";\n    }\n\n    render() {\n        return (\n            <div className=\"bodyInterface\" \n            onMouseEnter={this.highlight}\n            onMouseLeave={this.unhighlight}\n            onClick={this.showModal}>\n\n                {this.getModal()}\n\n                <div className=\"interfaceFixedWrapper\">\n                    <ColorBox body={this.props.body} />\n                </div>\n                \n                <div className=\"interfaceOuterWrapper\">\n                    <div className=\"interfaceInnerWrapper\">\n                        <LabelGroup object={this.props.body} />\n                    </div>\n\n                    <div className=\"interfaceInnerWrapper\">\n                        <ValueLabel name=\"mass\"\n                            label=\"Mass\" body={this.props.body} int={true}/>\n\n                        <ValueLabel name=\"trailLength\"\n                            label=\"Trail len\" body={this.props.body} />\n\n                        <ValueLabel name=\"trailThickness\"\n                            label=\"Trail thick\" body={this.props.body} /> \n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BodyInterface;","import React from \"react\";\n\nimport \"../style/interface.css\";\nimport CollectionMeta from \"./info/CollectionMeta\";\nimport BodyInterface from \"./info/BodyInterface\";\n\nclass Interface extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = { index: 0 };\n    }\n\n    collection() {\n        return this.props.collections[this.state.index];\n    }\n\n    rows() {\n        let c = this.collection();\n        return c.bodies.map(\n            (b, i) => (\n                <BodyInterface collection={c} body={b} key={i} index={i} \n                editable={this.props.editable}/>\n            )\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"interface\">\n                <CollectionMeta collection={this.collection()} \n                index={this.state.index}/>\n                \n                {this.rows()}\n            </div>\n        );\n    }\n}\n\nexport default Interface;","/**\r\n * Class providing an interface for drawing bodies/animations on a canvas\r\n * @typedef {Object} CanvasInterface\r\n * @property {Element} canvas - The canvas as a DOM element\r\n * @property {CanvasRenderingContext2D} ctx - The rendering context of the canvas\r\n * @property {number} width - The width of the canvas\r\n * @property {number} height - The height of the canvas\r\n */\r\nclass CanvasInterface {\r\n    constructor(canvasName) {\r\n        this.canvas = document.getElementById(canvasName);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Updates canvas dimensions and corresponding fields\r\n     */\r\n    update() {\r\n        let d = Math.min(window.innerWidth, window.innerHeight);\r\n\r\n        this.canvas.width = d;\r\n        this.canvas.height = d;\r\n        this.width = d;\r\n        this.height = d;\r\n\r\n        this.originX = this.width / 2;\r\n        this.originY = this.height / 2;\r\n    }\r\n\r\n    async translate(x, y, s=1) {\r\n        return [(x + this.originX) * s, (this.originY - y) * s];\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas\r\n     */\r\n    async clear() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n    }\r\n\r\n    /**\r\n     * Fill a circle\r\n     * @param {number} x - The x value of the coordinate\r\n     * @param {number} y  - The y value of the coordinate\r\n     * @param {number} radius - The radius in pixels of the circle\r\n     * @param {string} color - The color to draw the circle\r\n     * @param {boolean} [highlight=false] - Whether to outline body in white\r\n     */\r\n    async drawCoords(x, y, radius, color, highlight=false) {\r\n        // Translate coordinates to canvas coordiantes\r\n        // Originally assume origin at center\r\n        [x, y] = await this.translate(x, y);\r\n\r\n        this.ctx.fillStyle = color;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n        this.ctx.fill();\r\n\r\n        if (highlight) {\r\n            this.ctx.strokeStyle = \"white\";\r\n            this.ctx.lineWidth = 3;\r\n            this.ctx.beginPath();\r\n            this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n            this.ctx.stroke();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a line\r\n     * @param {number} x1 - The x value of the starting coordinate\r\n     * @param {number} y1 - The y value of the starting coordinate\r\n     * @param {number} x2 - The x value of the ending coordinate\r\n     * @param {number} y2 - The y value of the ending coordinate\r\n     * @param {string} color - The color to draw the line\r\n     * @param {number} width - The width of the line in pixels\r\n     */\r\n    async drawLine(x1, y1, x2, y2, color, width) {\r\n        // Again, translate coordinates accounting for center origin\r\n        [x1, y1] = await this.translate(x1, y1);\r\n        [x2, y2] = await this.translate(x2, y2);\r\n\r\n        this.ctx.strokeStyle = color;\r\n        this.ctx.lineWidth = width;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x1, y1);\r\n        this.ctx.lineTo(x2, y2);\r\n        this.ctx.stroke();\r\n    }\r\n\r\n    /**\r\n     * Connect two coordinates with a line\r\n     * @param {number[]} c1 - The first coordinate [x, y]\r\n     * @param {number[]} c2 - The second coordinate [x, y]\r\n     * @param {string} color - The color of the line\r\n     */\r\n    async connectCoordinates(c1, c2, color) {\r\n        await this.drawLine(c1[0], c1[1], c2[0], c2[1], color);\r\n    }\r\n\r\n    /**\r\n     * Connect two Position objects\r\n     * @param {Position} pos1 - The first position\r\n     * @param {Position} pos2 - The second position\r\n     * @param {string} color - The color of the line\r\n     */\r\n    async connectPositions(pos1, pos2, color) {\r\n        await this.drawLine([pos1.x, pos1.y], [pos2.x, pos2.y], color);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Position} position - The position to draw a circle at\r\n     * @param {number} radius - The radius of the circle\r\n     * @param {string} color - The color to draw the circle\r\n     */\r\n    async drawPosition(position, radius, color) {\r\n        await this.drawCoords(position.x, position.y, radius, color);\r\n    }\r\n\r\n    /**\r\n     * Draws the trail of motion of a body\r\n     * @param {Body} body - The body to draw the trail of\r\n     */\r\n    async drawBodyTrail(body) {\r\n        if (!body.trail.length || !body.trailLength)\r\n            return;\r\n\r\n        let trailLen = Math.min(body.trail.length, body.trailLength);\r\n\r\n        let [x, y] = await this.translate(body.x, body.y);\r\n\r\n        this.ctx.strokeStyle = body.color;\r\n        this.ctx.lineWidth = body.trailThickness;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(x, y);\r\n\r\n        for (let i = trailLen - 1; i >= 0; i--) {\r\n            this.ctx.lineTo.apply(this.ctx, await this.translate(body.trail[i][0], body.trail[i][1]));\r\n            let [a, b] = await this.translate(body.trail[i][0], body.trail[i][1]);\r\n            this.ctx.lineTo(a, b);\r\n        }\r\n\r\n        this.ctx.stroke();\r\n    }\r\n \r\n    /**\r\n     * Draws a body on the canvas\r\n     * @param {Body} body - The body to draw\r\n     * @param {number} [scale=1] - The (integer) scale of the drawing.\r\n     */\r\n    async drawBody(body, scale=1) {\r\n        \r\n        await this.drawCoords(\r\n            body.x,\r\n            body.y,\r\n            body.radius * scale,\r\n            body.color,\r\n            body.highlight\r\n        );\r\n        \r\n        await this.drawBodyTrail(body);\r\n    }\r\n}\r\n\r\nexport default CanvasInterface;","import { CustomValueError, NotReadyError } from \"./errors\";\r\nimport CanvasInterface from \"./visual\";\r\n\r\n/**\r\n * Class providing methods to help animate a BodyCollection\r\n * @typedef {Object} Animator\r\n * @property {BodyCollection} collection - The collection of bodies\r\n * @property {CanvasInterface} interface - The interface of the target canvas\r\n * @property {number} speed - The speed of the animation, default 1\r\n * @property {boolean} isRunning - Whether or not the animation is running (being drawn)\r\n * @property {boolean} isPaused - Whether or not the animation is paused (being calculated)\r\n * @property {number} frame - The requestAnimationFrame return value (or 0)\r\n */\r\nclass Animator {\r\n    constructor(collection, canvasId) {\r\n        this.collection = collection;\r\n        this.id = canvasId;\r\n\r\n        this.speed = 1;\r\n\r\n        this.isRunning = false;\r\n        this.isPaused = true;\r\n\r\n        this.isDrawing = false;\r\n\r\n        this.frame = 0;\r\n\r\n        this.scale = 1;\r\n\r\n        // Interface initialized separately\r\n        // Allows user to instantiate Animator without rendering a canvas\r\n        this.interface = null;\r\n    }\r\n\r\n    /**\r\n     * Initialize animator \r\n     * NOTE: Must be run with canvas rendered in the DOM\r\n     */\r\n    initialize() {\r\n        this.interface = new CanvasInterface(this.id);\r\n    }\r\n\r\n    /**\r\n     * Put animator on standby, discarding existing CanvasInterface\r\n     * NOTE: Will stop animator if it is running\r\n     */\r\n    standby() {\r\n        this.stop();\r\n        this.interface = null;\r\n    }\r\n\r\n    /**\r\n     * Update canvas dimension; should be run whenever canvas is resized\r\n     */\r\n    dimensionUpdate() {\r\n        if (this.interface !== null)\r\n            this.interface.update();\r\n    }\r\n\r\n    /**\r\n     * Change the canvas associated with the animator\r\n     * NOTE: Must be invoked while animator is in standby or uninitialized\r\n     * @param {string} newId - The ID of the animator's new canvas\r\n     */\r\n    changeId(newId) {\r\n        if (this.interface !== null)\r\n            throw new NotReadyError(\"put animator in standby with the standby() method\");\r\n        this.id = newId;\r\n    }\r\n\r\n    /**\r\n     * Change the scale of the animation to enlarge or shrink bodies\r\n     * by some coefficient based on the desired visuals.\r\n     * @param {number} newScale - The new scale of the animation\r\n     */\r\n    changeScale(newScale) {\r\n        if (newScale < 1)\r\n            throw new CustomValueError(newScale, 1);\r\n\r\n        this.scale = newScale;\r\n    }\r\n\r\n    /**\r\n     * Get a particular body from the collection\r\n     * @param {number} i - The index of the body to retrieve\r\n     * @returns {Body} The requested body\r\n     */\r\n    body(i) {\r\n        return this.collection.bodies[i];\r\n    }\r\n\r\n    /**\r\n     * Updates all numerical values in the simulation\r\n     */\r\n    calculate() {\r\n        for (let i = 0; i < this.speed; i++)\r\n            this.collection.updateSimulation();\r\n    }\r\n\r\n    /**\r\n     * Draw the current state of the collection, as is\r\n     */\r\n    async draw() {\r\n        this.isDrawing = true;\r\n\r\n        this.interface.clear();\r\n\r\n        // Draw bodies\r\n        for (let i = 0; i < this.collection.bodies.length; i++)\r\n            await this.interface.drawBody(this.body(i), this.scale);\r\n\r\n        // Draw center of mass\r\n        this.interface.drawPosition(\r\n            this.collection.centerOfMass, 2, \"white\"\r\n        );\r\n\r\n        this.isDrawing = false;\r\n    }\r\n\r\n    /**\r\n     * Run the entire animation loop, calculation and drawing\r\n     */\r\n    loop() {\r\n        if (!this.isPaused)\r\n            this.calculate();\r\n            \r\n        if (!this.isDrawing)\r\n            this.draw();\r\n\r\n        if (this.isRunning)\r\n            requestAnimationFrame(() => this.loop());\r\n    }\r\n\r\n    /**\r\n     * Pause the animation (continues drawing, but does not calculate)\r\n     */\r\n    pause() {\r\n        this.isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * Unpause the animation (resume calculating)\r\n     */\r\n    unpause() {\r\n        this.isPaused = false;\r\n    }\r\n\r\n    /**\r\n     * Toggle the animation's calculation loop\r\n     */\r\n    togglePause() {\r\n        if (this.isPaused)\r\n            this.unpause();\r\n        else\r\n            this.pause();\r\n    }\r\n\r\n    /**\r\n     * Start the animation (starts drawing loop)\r\n     */\r\n    start() {\r\n        this.frame = requestAnimationFrame(() => this.loop());\r\n        this.isRunning = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the animation (stops drawing loop)\r\n     */\r\n    stop() {\r\n        this.isRunning = false;\r\n        cancelAnimationFrame(this.frame);\r\n    }\r\n\r\n    /**\r\n     * Toggle the full animation\r\n     */\r\n    toggle() {\r\n        if (this.interface === null) {\r\n            throw new NotReadyError(\"initialize Animator instance\")\r\n        }\r\n        if (this.isRunning)\r\n            this.stop();\r\n        else\r\n            this.start();\r\n    }\r\n\r\n}\r\n\r\nexport default Animator;","import React from \"react\";\n\nimport Visualizer from \"./Visualizer\";\nimport Interface from \"./Interface\";\n\nimport BodyCollection from \"../engine/collection\";\nimport Animator from \"../engine/animate\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        // Initialize default body collection\n        let c = new BodyCollection();\n        c.addBody(91, -44);\n        c.addBody(-13, -32);\n        c.addBody(26, 45);\n        this.animators = [new Animator(c, \"canvas0\")];\n\n        this.state = {\n            canvasSize: 0,\n            paused: true\n        };\n    }\n\n    componentDidMount() {\n        this.updateCanvasSize();\n        window.addEventListener(\"resize\", this.updateCanvasSize);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateCanvasSize);\n    }\n\n    updateCanvasSize = () => {\n        this.setState({ canvasSize: Math.min(window.innerWidth, window.innerHeight) });\n    }\n\n    toggleAll = () => {\n        this.animators.forEach(a => a.togglePause());\n        this.setState({paused: !this.state.paused});\n    }\n\n    visualizers() {\n        return this.animators.map(\n            (a, i) => (\n                <Visualizer animator={a} key={i} index={i}\n                size={this.state.canvasSize}/>\n            )\n        );\n    }\n\n    render() {\n        let cssObject = {\n            width: this.state.canvasSize,\n            height: this.state.canvasSize,\n            minWidth: this.state.canvasSize,\n            flexBasis: this.state.canvasSize\n        };\n\n        return (\n            <div className=\"App\">\n                <div className=\"collectionVisuals\"\n                style={cssObject} onClick={this.toggleAll}>\n                    {this.visualizers()}\n                </div>\n                 <div className=\"collectionInterface\">\n                    <Interface collections={this.animators.map(a => a.collection)}\n                    editable={this.state.paused} />\n                 </div>\n            </div>\n        );\n    }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}